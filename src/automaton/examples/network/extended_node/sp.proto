syntax = "proto3";

message blocks_request {
/*
  Peer A send this when requesting blocks to show what is its top of the chain so if he is many
  blocks behind peer B will send him more blocks. If connects for the first time, this will be zero.
*/
  bytes top_block_hash = 1;

  // Peer A sends the hash/es of the block/s he requests from B
  repeated bytes block_hash_requested = 2;
}

message block {
  bytes hash = 1;
  bytes prev_hash = 2;
  uint32 height = 3;
  bytes discovered_by = 4;
  bytes nonce = 5;
}

message blocks_response {
  // Peer B sets the hash/es of the block/s he sends to A
  repeated bytes block_hash = 1;
   // Peer B sends the whole block/s (serialized block messages) to A
  repeated bytes whole_block = 2;
}

message hello {
  string id = 1;
}

message data {
  blocks_request msg_type_request = 1;
  blocks_response msg_type_response = 2;
  hello msg_type_hello = 3;
}

message header {
  uint32 message_size = 1;
}

// Not in use right now

// message peer_info {
//   string data = 1;
// }
//
// message add_peer {
//   string id = 1;
//   string connection_type = 2;
//   string address = 3;
// }
//
// message remove_peer {
//   string id = 1;
// }
//
// message add_acceptor {
//   string id = 1;
//   string connection_type = 2;
//   string address = 3;
// }
//
// message remove_acceptor {
//   string id = 1;
// }
//
// message send_message {
//   bytes data = 1;
//   string peer_id = 2;
// }
//
// message handle_block {
//   block block_ = 1;
// }
//
// message command {
//   add_peer add_peer_cmd = 1;
//   remove_peer remove_peer_cmd = 2;
//   add_acceptor add_acceptor_cmd = 3;
//   remove_acceptor remove_acceptor_cmd = 4;
//   send_message send_message_cmd = 5;
//   handle_block handle_block_cmd = 6;
// }
