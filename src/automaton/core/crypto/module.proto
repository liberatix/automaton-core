syntax = "proto3";

message hash {
  message size {
    message request {
    }
    message response {
      uint32 digest_size = 1;
    }
  }

  message digest {
    message request {
      bytes input = 1;
    }
    message response {
      bytes digest = 1;
    }
  }

  message update {
    message request {
      bytes input = 1;
    }
    message response {
    }
  }

  message final {
    message request {
    }
    message response {
      bytes digest = 1;
    }
  }

  message restart {
    message request {
    }
    message response {
    }
  }
}

message dsig {
  message getters {
    uint32 public_key_size = 1;
    uint32 private_key_size = 2;
    uint32 signature_size = 3;
    uint32 k_size = 4;
    bool has_deterministic_signatures = 5;
  }

  message public_key_size {
    message request {}
    message response {
      uint32 public_key_size = 1;
    }
  }

  message private_key_size {
    message request {}
    message response {
      uint32 private_key_size = 1;
    }
  }

  message signature_size {
    message request {}
    message response {
      uint32 signature_size = 1;
    }
  }

  message k_size {
    message request {}
    message response {
      uint32 k_size = 1;
    }
  }

  message has_deterministic_signatures {
    message request {}
    message response {
      bool has_deterministic_signatures = 1;
    }
  }

  message gen_public_key {
    message request {
      bytes private_key = 1;
    }
    message response {
      bytes public_key = 1;
    }
  }

  message sign {
    message request {
      bytes private_key = 1;
      bytes message = 2;
    }
    message response {
      bytes signature = 1;
    }
  }

  message sign_deterministic {
    message request {
      bytes private_key = 1;
      bytes message = 2;
      bytes k = 3;
    }
    message response {
      bytes signature = 1;
    }
  }

  message verify {
    message request {
      bytes public_key = 1;
      bytes message = 2;
      bytes signature = 3;
    }
    message response {
      bool result = 1;
    }
  }
}

message rand {
  message bit {
    message request {
    }
    message response {
      bool bit = 1;
    }
  }

  message byte {
    message request {
    }
    message response {
      // protobuf does not support single byte as a primitive.
      uint32 byte = 1;
    }
  }

  message block {
    message request {
      uint32 size = 1;
    }
    message response {
      bytes result = 1;
    }
  }
}
